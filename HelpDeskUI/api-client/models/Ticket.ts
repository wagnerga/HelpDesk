/* tslint:disable */
/* eslint-disable */
/**
 * HelpDeskAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    assignedUserId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    createdAt?: number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    status?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    updatedAt?: number | null;
    /**
     * 
     * @type {User}
     * @memberof Ticket
     */
    assignedUser?: User;
}

/**
 * Check if a given object implements the Ticket interface.
 */
export function instanceOfTicket(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TicketFromJSON(json: any): Ticket {
    return TicketFromJSONTyped(json, false);
}

export function TicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ticket {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'assignedUserId': !exists(json, 'assignedUserId') ? undefined : json['assignedUserId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'assignedUser': !exists(json, 'assignedUser') ? undefined : UserFromJSON(json['assignedUser']),
    };
}

export function TicketToJSON(value?: Ticket | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'assignedUserId': value.assignedUserId,
        'createdAt': value.createdAt,
        'description': value.description,
        'status': value.status,
        'updatedAt': value.updatedAt,
        'assignedUser': UserToJSON(value.assignedUser),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * HelpDeskAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TicketStatus } from './TicketStatus';
import {
    TicketStatusFromJSON,
    TicketStatusFromJSONTyped,
    TicketStatusToJSON,
} from './TicketStatus';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface ModelTicket
 */
export interface ModelTicket {
    /**
     * 
     * @type {User}
     * @memberof ModelTicket
     */
    assignedUser?: User;
    /**
     * 
     * @type {string}
     * @memberof ModelTicket
     */
    assignedUserId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ModelTicket
     */
    createdAt: number;
    /**
     * 
     * @type {string}
     * @memberof ModelTicket
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ModelTicket
     */
    id: string;
    /**
     * 
     * @type {TicketStatus}
     * @memberof ModelTicket
     */
    status: TicketStatus;
    /**
     * 
     * @type {number}
     * @memberof ModelTicket
     */
    updatedAt?: number | null;
}

/**
 * Check if a given object implements the ModelTicket interface.
 */
export function instanceOfModelTicket(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ModelTicketFromJSON(json: any): ModelTicket {
    return ModelTicketFromJSONTyped(json, false);
}

export function ModelTicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelTicket {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assignedUser': !exists(json, 'assignedUser') ? undefined : UserFromJSON(json['assignedUser']),
        'assignedUserId': !exists(json, 'assignedUserId') ? undefined : json['assignedUserId'],
        'createdAt': json['createdAt'],
        'description': json['description'],
        'id': json['id'],
        'status': TicketStatusFromJSON(json['status']),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
    };
}

export function ModelTicketToJSON(value?: ModelTicket | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assignedUser': UserToJSON(value.assignedUser),
        'assignedUserId': value.assignedUserId,
        'createdAt': value.createdAt,
        'description': value.description,
        'id': value.id,
        'status': TicketStatusToJSON(value.status),
        'updatedAt': value.updatedAt,
    };
}


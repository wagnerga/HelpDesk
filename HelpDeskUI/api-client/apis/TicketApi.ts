/* tslint:disable */
/* eslint-disable */
/**
 * HelpDeskAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignTicketRequest,
  BooleanResponse,
  GetTicketsRequest,
  InsertTicketRequest,
  ModelTicketModelWrapperResponse,
  UpdateTicketRequest,
} from '../models';
import {
    AssignTicketRequestFromJSON,
    AssignTicketRequestToJSON,
    BooleanResponseFromJSON,
    BooleanResponseToJSON,
    GetTicketsRequestFromJSON,
    GetTicketsRequestToJSON,
    InsertTicketRequestFromJSON,
    InsertTicketRequestToJSON,
    ModelTicketModelWrapperResponseFromJSON,
    ModelTicketModelWrapperResponseToJSON,
    UpdateTicketRequestFromJSON,
    UpdateTicketRequestToJSON,
} from '../models';

export interface TicketAssignPostRequest {
    assignTicketRequest?: AssignTicketRequest;
}

export interface TicketListPostRequest {
    getTicketsRequest?: GetTicketsRequest;
}

export interface TicketPatchRequest {
    updateTicketRequest?: UpdateTicketRequest;
}

export interface TicketPostRequest {
    insertTicketRequest?: InsertTicketRequest;
}

export interface TicketTicketIdDeleteRequest {
    ticketId: string;
}

/**
 * 
 */
export class TicketApi extends runtime.BaseAPI {

    /**
     */
    async ticketAssignPostRaw(requestParameters: TicketAssignPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Ticket/assign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignTicketRequestToJSON(requestParameters.assignTicketRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseFromJSON(jsonValue));
    }

    /**
     */
    async ticketAssignPost(requestParameters: TicketAssignPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponse> {
        const response = await this.ticketAssignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ticketListPostRaw(requestParameters: TicketListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelTicketModelWrapperResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Ticket/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetTicketsRequestToJSON(requestParameters.getTicketsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelTicketModelWrapperResponseFromJSON(jsonValue));
    }

    /**
     */
    async ticketListPost(requestParameters: TicketListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelTicketModelWrapperResponse> {
        const response = await this.ticketListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ticketPatchRaw(requestParameters: TicketPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Ticket`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTicketRequestToJSON(requestParameters.updateTicketRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseFromJSON(jsonValue));
    }

    /**
     */
    async ticketPatch(requestParameters: TicketPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponse> {
        const response = await this.ticketPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ticketPostRaw(requestParameters: TicketPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Ticket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsertTicketRequestToJSON(requestParameters.insertTicketRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseFromJSON(jsonValue));
    }

    /**
     */
    async ticketPost(requestParameters: TicketPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponse> {
        const response = await this.ticketPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ticketTicketIdDeleteRaw(requestParameters: TicketTicketIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanResponse>> {
        if (requestParameters.ticketId === null || requestParameters.ticketId === undefined) {
            throw new runtime.RequiredError('ticketId','Required parameter requestParameters.ticketId was null or undefined when calling ticketTicketIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Ticket/{ticketId}`.replace(`{${"ticketId"}}`, encodeURIComponent(String(requestParameters.ticketId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanResponseFromJSON(jsonValue));
    }

    /**
     */
    async ticketTicketIdDelete(requestParameters: TicketTicketIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanResponse> {
        const response = await this.ticketTicketIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
